name: GNU Autotools Build & Test
on:
  workflow_dispatch:
    inputs:
      use_depends:
        description: 'Build and use depends directory'
        type: boolean
        default: false
        required: false
      with_qt:
        description: 'Build with Qt GUI'
        type: boolean
        default: true
        required: false
      with_wallet:
        description: 'Build with wallet support'
        type: boolean
        default: true
        required: false
      with_usdt:
        description: 'Build with USDT support'
        type: boolean
        default: false
        required: false
      with_zmq:
        description: 'Build with ZMQ support'
        type: boolean
        default: true
        required: false
      with_incompatible_bdb:
        description: 'Build with incompatible Berkeley DB'
        type: boolean
        default: false
        required: false
      with_qtdbus:
        description: 'Build with Qt DBus support'
        type: boolean
        default: true
        required: false
      enable_reduce_exports:
        description: 'Enable reduce exports'
        type: boolean
        default: true
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1
  USE_DEPENDS: ${{ github.event.inputs.use_depends || false }}
  WITH_QT: ${{ github.event.inputs.with_qt || true }}
  WITH_WALLET: ${{ github.event.inputs.with_wallet || true }}
  WITH_USDT: ${{ github.event.inputs.with_usdt || false }}
  ENABLE_ZMQ: ${{ github.event.inputs.with_zmq || true }}
  WITH_QTDBUS: ${{ github.event.inputs.with_qtdbus || true }}
  ENABLE_REDUCE_EXPORTS: ${{ github.event.inputs.enable_reduce_exports || true }}
  LC_ALL: C.UTF-8
  BOOST_TEST_RANDOM: 1

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: 'Linux x86_64'
            os: ubuntu-24.04
            arch: x86_64
            compiler: clang
            platform: linux
          - name: 'Linux ARM64'
            os: ubuntu-24.04
            arch: arm64
            compiler: clang
            platform: linux
          - name: 'macOS x86_64'
            os: macos-14
            arch: x86_64
            compiler: clang
            platform: macos
          - name: 'macOS ARM64'
            os: macos-14
            arch: arm64
            compiler: clang
            platform: macos
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      BASE_ROOT_DIR: ${{ github.workspace }}
      CCACHE_DIR: ${{ github.workspace }}/ccache
      CC: ${{ matrix.config.compiler }}
      CXX: ${{ matrix.config.compiler }}++
      LC_ALL: C.UTF-8

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive

      - name: Restore Ccache cache
        id: ccache-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: autotools-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ env.USE_DEPENDS }}-${{ env.WITH_QT }}-${{ env.WITH_WALLET }}-${{ env.WITH_USDT }}-ccache-${{ github.run_id }}
          restore-keys: autotools-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ env.USE_DEPENDS }}-${{ env.WITH_QT }}-${{ env.WITH_WALLET }}-${{ env.WITH_USDT }}-ccache-

      - name: Setup Linux Dependencies
        if: matrix.config.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang ccache build-essential autoconf automake libtool pkg-config python3-zmq libevent-dev bsdmainutils libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev python3-venv valgrind
          if [ "${{ env.WITH_USDT }}" == "true" ]; then
            sudo apt-get install -y systemtap-sdt-dev bpfcc-tools bpftrace
          fi
          if [ "${{ env.WITH_QT }}" == "true" ]; then
            if [ "${{ matrix.config.arch }}" == "arm64" ]; then
              sudo apt-get install -y qtbase5-dev qttools5-dev-tools
            fi
          fi
          python3 -m venv $HOME/venv
          source $HOME/venv/bin/activate
          pip3 install pyzmq

      - name: Setup macOS Dependencies
        if: matrix.config.platform == 'macos'
        env:
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |
          if [ -d "/Applications/Xcode_15.0.app" ]; then
            sudo xcode-select --switch /Applications/Xcode_15.0.app
          else
            echo "Xcode 15.0 not found, skipping xcode-select"
          fi
          clang --version
          brew install --quiet python@3 || brew link --overwrite python@3
          brew install --quiet coreutils ninja pkgconf gnu-getopt ccache boost libevent zeromq qrencode berkeley-db4 autoconf automake libtool
          if [ "${{ env.WITH_QT }}" == "true" ]; then
            brew install --quiet qt@5
          fi
          if [ "${{ matrix.config.arch }}" == "arm64" ]; then
            echo 'export PATH="/opt/homebrew/bin:$PATH"' >> $HOME/.bashrc
          fi
          source $HOME/.bashrc
          python3 -m venv $HOME/venv
          source $HOME/venv/bin/activate
          pip3 install pyzmq

      - name: Build Depends
        if: env.USE_DEPENDS == 'true'
        run: |
          if [ "${{ matrix.config.platform }}" == "macos" ]; then
            make -C depends HOST=${{ matrix.config.arch }}-apple-darwin
            export DEPENDS_DIR="${{ github.workspace }}/depends"
            export HOST=${{ matrix.config.arch }}-apple-darwin
          else
            if [ "${{ matrix.config.arch }}" == "arm64" ]; then
              export HOST="aarch64-linux-gnu"
            else
              export HOST="${{ matrix.config.arch }}-linux-gnu"
            fi
            make -C depends HOST=$HOST
            export DEPENDS_DIR="${{ github.workspace }}/depends"
          fi
          export BITCOIN_CONFIG="--prefix=$DEPENDS_DIR/$HOST"
          if [ "${{ env.WITH_QT }}" == "true" ]; then
            export BITCOIN_CONFIG_ALL="--enable-debug --enable-werror --with-gui=qt5"
          else
            export BITCOIN_CONFIG_ALL="--enable-debug --enable-werror"
          fi

      - name: Setup System Dependencies
        if: env.USE_DEPENDS != 'true'
        run: |
          export DEPENDS_DIR="/usr"
          export HOST=""
          export BITCOIN_CONFIG=""
          if [ "${{ env.WITH_QT }}" == "true" ]; then
            export BITCOIN_CONFIG_ALL="--enable-debug --enable-werror --with-gui=qt5"
          else
            export BITCOIN_CONFIG_ALL="--enable-debug --enable-werror"
          fi

      - name: Enable core dumps
        run: |
          CORE_DUMP_DIR="${{ github.workspace }}/core_dumps"
          mkdir -p "$CORE_DUMP_DIR"
          chmod 777 "$CORE_DUMP_DIR"
          if [ "${{ matrix.config.platform }}" == "linux" ]; then
            sudo sysctl -w kernel.core_pattern="$CORE_DUMP_DIR/core.%e.%p"
          else
            sudo sysctl -w kern.corefile="$CORE_DUMP_DIR/core.%N"
          fi
          echo "Core dumps will be stored in: $CORE_DUMP_DIR"
          ulimit -c unlimited

      - name: Create dummy .tapyrus file
        run: echo ">" $HOME/.tapyrus

      - name: Build and run tests
        run: |
          ./autogen.sh

          # Build configuration
          CONFIG_OPTS=""
          if [ "${{ env.WITH_WALLET }}" == "false" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --disable-wallet"
          fi
          if [ "${{ env.WITH_USDT }}" == "true" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --enable-usdt"
          fi
          if [ "${{ env.ENABLE_ZMQ }}" == "true" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --enable-zmq"
          fi
          if [ "${{ env.WITH_QTDBUS }}" == "false" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --with-qtdbus=no"
          fi
          if [ "${{ env.ENABLE_REDUCE_EXPORTS }}" == "true" ]; then
            CONFIG_OPTS="$CONFIG_OPTS --enable-reduce-exports"
          fi

          # Set Boost environment variables for macOS
          if [ "${{ env.USE_DEPENDS }}" == "true" ]; then
            # Use Boost from depends directory
            export BOOST_ROOT="$DEPENDS_DIR/$HOST"
            export BOOST_INCLUDEDIR="$DEPENDS_DIR/$HOST/include"
            export BOOST_LIBRARYDIR="$DEPENDS_DIR/$HOST/lib"
            export CPPFLAGS="-I$DEPENDS_DIR/$HOST/include"
            export LDFLAGS="-L$DEPENDS_DIR/$HOST/lib"
          else
            # Use system Boost
              if [ "${{ matrix.config.platform }}" == "macos" ]; then
              export BOOST_ROOT="/opt/homebrew/opt/boost"
              export BOOST_INCLUDEDIR="/opt/homebrew/opt/boost/include"
              export BOOST_LIBRARYDIR="/opt/homebrew/opt/boost/lib"
              export CPPFLAGS="-I/opt/homebrew/opt/boost/include"
              export LDFLAGS="-L/opt/homebrew/opt/boost/lib"
              export PKG_CONFIG_PATH="/opt/homebrew/opt/boost/lib/pkgconfig:$PKG_CONFIG_PATH"
            else
              export BOOST_ROOT="/usr/local/opt/boost"
              export BOOST_INCLUDEDIR="/usr/local/opt/boost/include"
              export BOOST_LIBRARYDIR="/usr/local/opt/boost/lib"
              export CPPFLAGS="-I/usr/local/opt/boost/include"
              export LDFLAGS="-L/usr/local/opt/boost/lib"
              export PKG_CONFIG_PATH="/usr/local/opt/boost/lib/pkgconfig:$PKG_CONFIG_PATH"
            fi
          fi
          if [ "${{ matrix.config.platform }}" == "macos" ]; then
            CPU_COUNT=$(sysctl -n hw.ncpu)
            ./configure ${BITCOIN_CONFIG} ${BITCOIN_CONFIG_ALL} ${CONFIG_OPTS} --with-incompatible-bdb
            make -j "$CPU_COUNT"
          else
            ./configure ${BITCOIN_CONFIG} ${BITCOIN_CONFIG_ALL} ${CONFIG_OPTS} --with-incompatible-bdb
            make -j $(nproc)
          fi

          echo "---------------- Start unit test ---------------- "
          if [ "${{ matrix.config.platform }}" == "linux" ]; then
            valgrind src/test/test_tapyrus --log_level=test_suite --report_level=short --build_info --catch_system_errors
          else
            src/test/test_tapyrus --log_level=test_suite --report_level=short --build_info --catch_system_errors
          fi
          echo "---------------- Start util test ---------------- "
          python3 test/util/tapyrus-util-test.py
          echo "---------------- Start functional test ---------------- "
          python3 test/functional/test_runner.py -j 1 --combinedlogslen=4000 --coverage --failfast --quiet --extended
          echo "---------------- DONE ---------------------"

      - name: Save Ccache cache
        uses: actions/cache/save@v4
        if: steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CCACHE_DIR }}
          key: autotools-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ env.USE_DEPENDS }}-${{ env.WITH_QT }}-${{ env.WITH_WALLET }}-${{ env.WITH_USDT }}-ccache-${{ github.run_id }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.config.name }}
          path: |
            ${{ github.workspace }}/test-suite.log
            ${{ github.workspace }}/test/functional/test_framework/test_framework.log
          retention-days: 7

      - name: Debug Core Dump (if exists)
        if: failure()
        run: |
          if [ "${{ matrix.config.platform }}" == "linux" ]; then
            COREFILE=$(coredumpctl list --no-pager --output json | jq -r '.[0].filename')
            if [ -f "$COREFILE" ]; then
              echo "Found core dump: $COREFILE"
              if command -v coredumpctl &> /dev/null; then
                BINARY=$(coredumpctl info --no-pager | grep "Executable" | awk '{print $2}')
              else
                BINARY=$(file "$COREFILE" | awk -F"'" '{print $2}')
              fi
              if [ -x "$BINARY" ]; then
                echo "Detected crashed binary: $BINARY"
              else
                echo "Could not detect crashed binary, using tapyrusd as default"
                BINARY="./tapyrusd"
              fi
              gdb -batch -ex "bt" -ex "quit" "$BINARY" "$COREFILE"
            fi
          else
            COREFILE=$(ls -t ${{ github.workspace }}/core_dumps/core.* 2>/dev/null | head -n 1)
            if [ -f "$COREFILE" ]; then
              echo "Found core dump: $COREFILE"
              BINARY=$(file "$COREFILE" | awk -F"'" '{print $2}')
              if [ -x "$BINARY" ]; then
                echo "Detected crashed binary: $BINARY"
              else
                echo "Could not detect crashed binary, using tapyrusd as default"
                BINARY="./tapyrusd"
              fi
              lldb -c "$COREFILE" -o "bt" -o "quit" -- "$BINARY"
            fi
          fi

      - name: Upload Core Dumps
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: core-dumps-${{ matrix.config.name }}
          path: ${{ github.workspace }}/core_dumps/
          retention-days: 7

    # Cross-compilation jobs
    # cross-compile-windows:
    #   runs-on: ubuntu-24.04
    #   steps:
    #     - uses: actions/checkout@v4
    #     - name: Install dependencies
    #       run: |
    #         sudo apt-get update
    #         sudo apt-get install -y python3 nsis g++-mingw-w64-x86-64 wine
    #     - name: Build for Windows
    #       env:
    #         HOST: x86_64-w64-mingw32
    #         DEP_OPTS: NO_QT=1
    #         BITCOIN_CONFIG: --enable-reduce-exports
    #       run: |
    #         make -j $(nproc) -C depends HOST=$HOST $DEP_OPTS
    #         ./autogen.sh
    #         CONFIG_SITE=$PWD/depends/$HOST/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking --enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary --with-gui=no
    #         make -j $(nproc)
    #
    # cross-compile-macos:
    #   runs-on: ubuntu-24.04
    #   steps:
    #     - uses: actions/checkout@v4
    #     - name: Install dependencies
    #       run: |
    #         sudo apt-get update
    #         sudo apt-get install -y python3-dev clang g++-mingw-w64-x86-64
    #     - name: Build for macOS
    #       env:
    #         HOST: x86_64-apple-darwin19
    #         OSX_SDK: /opt/osx-sdk
    #       run: |
    #         make -j $(nproc) -C depends HOST=$HOST
    #         ./autogen.sh
    #         CONFIG_SITE=$PWD/depends/$HOST/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking --enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary --with-gui=no
    #         make -j $(nproc) 