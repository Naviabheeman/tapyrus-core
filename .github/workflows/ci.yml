name: CI

on: [push, pull_request]

env:
  CI_MAKEJOBS: -j"$(($(nproc)+1))"
  CI_GOAL: "install"
  CI_RUN_TESTS: true
  CI_RUN_BENCH: true
  CI_LC_ALL: C.UTF-8
  CI_BOOST_TEST_RANDOM: ${{ secrets.BOOST_TEST_RANDOM || '1$RANDOM' }}
  CI_CCACHE_SIZE: 100M
  CCACHE_TEMPDIR: /tmp/.ccache-temp
  CCACHE_COMPRESS: 1
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CI_BASE_OUTDIR: ${{ github.workspace }}/out
  CI_SDK_URL: https://bitcoincore.org/depends-sources/sdks
  CI_WINEDEBUG: fixme-all
  CI_BUILD_PACKAGES: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache bison
  CI_DEPENDS_OPTS: ''
  LINUX_PACKAGES: "python3-zmq libevent-dev bsdmainutils libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev systemtap-sdt-dev bpfcc-tools bpftrace"
  MACOS_PACKAGES: "cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools xorriso libtinfo5"
  WIN_PACKAGES: "python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64"
  LINUX_CONFIG: "--enable-zmq --with-incompatible-bdb --enable-reduce-exports --enable-usdt CPPFLAGS=-DDEBUG_LOCKORDER"
  MACOS_CONFIG: ""
  WIN_CONFIG: "--enable-reduce-exports"

jobs:
  lint:
    name: "[PARTIAL_PENDING]lint"
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          RETRY() { for i in {1..3}; do $* && break || sleep 1; done; }
          RETRY apt-get update
          RETRY apt-get install --no-install-recommends --no-upgrade -qq python3 python3-pip git
          RETRY pip3 install flake8
          if [ $GITHUB_EVENT_NAME != "pull_request" ]; then test/lint/commit-script-check.sh $(git rev-parse $GITHUB_BASE_REF)..$(git rev-parse HEAD); fi
          test/lint/check-doc.py
          test/lint/check-rpc-mappings.py .
          test/lint/lint-all.sh
          echo "PENDING some lint files! pending lint file name has 'pending-' prefix."
          ls test/lint/ | grep ^pending-

  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target_os: [linux, macos, windows]
        architecture: [x86_64, arm64]
        compiler: [gcc, clang]
        debug: [true, false]
        gui: [qt5, no]
        wallet: [yes, no]
        include:
          - target_os: linux
            compiler: gcc
          #- target_os: linux
          #  compiler: clang
          - target_os: linux
            compiler: gcc
          #- target_os: linux
          #  compiler: clang
        exclude:
          #- target_os: macos
          #- target_os: windows
          - gui: qt5
          - wallet: no
          - architecture: arm64
          - target_os: macos
          - target_os: windows

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Print Matrix Configuration
        run: |
          echo "Target OS: ${{ matrix.target_os }}"
          echo "Architecture: ${{ matrix.architecture }}"
          echo "Compiler: ${{ matrix.compiler }}"
          echo "Debug Mode: ${{ matrix.debug }}"
          echo "GUI: ${{ matrix.gui }}"

      - name: Configure Retry Function and Update PATH
        run: |
          RETRY() { for i in {1..3}; do $* && break || sleep 1; done; }
          export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")

      - name: Export Environment Variables
        run: |
          env | grep -E '^(CI_|STEP_|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG|PACKAGES)' | tee /tmp/env
          if [ "${{ matrix.target_os }}" == "windows" ]; then
            export PACKAGES="env.WIN_PACKAGES"
            export CO=ms
            export CONFIG_OS_OPT="$env.WIN_CONFIG"
            export CI_RUN_TESTS=false
            export CI_RUN_BENCH=false
          elif [ "${{ matrix.target_os }}" == "macos" ]; then
            export PACKAGES="env.MACOS_PACKAGES"
            export CO=apple
            export CONFIG_OS_OPT="$env.MACOS_CONFIG"
            export CI_GOAL="all deploy"
            export CI_RUN_TESTS=false
            export CI_RUN_BENCH=false
          else
            export PACKAGES="env.LINUX_PACKAGES"
            export CO=unknown
            export CONFIG_OS_OPT="$env.LINUX_CONFIG"
          fi
          if [ "${{ matrix.compiler }}" == "gcc" ]; then
            export CC=gcc
            export CXX=g++
          elif [ "${{ matrix.compiler }}" == "clang" ]; then
            export CC=clang
            export CXX=clang++
          fi
          if [ "${{ matrix.debug }}" == "true" ]; then
            export BUILD_TYPE="Debug"
            export DEBUG_FLAGS="-g -O0 -DDEBUG"
          else
            export BUILD_TYPE="Release"
            export DEBUG_FLAGS="-O2"
          fi
          if [ "${{ matrix.wallet }}" == "no" ]; then
            export CI_DEPENDS_OPTS="NO_WALLET=1"
          fi
          if [ "${{ matrix.gui }}" == "no" ]; then
            export CI_DEPENDS_OPTS="NO_QT=1"
          fi
          export HOST=${{matrix.architecture}}-${CO}-${{matrix.target_os}}-gnu
      #if [ -n ${{ env.DPKG_ADD_ARCH }} ] then
      #  sudo dpkg --add-architecture ${{ env.DPKG_ADD_ARCH }}
      #fi

      - name: Install Dependencies
        run: |
          RETRY() { for i in {1..3}; do $* && break || sleep 1; done; }
          RETRY sudo apt-get update
          RETRY sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES ${{ env.CI_BUILD_PACKAGES }}  linux-headers-generic

      - name: Ensure default datadir does not exist
        run: echo "> $HOME/.tapyrus"

      - name: Enable Core Dumps
        run: |
          mkdir -p $GITHUB_WORKSPACE/coredumps
          echo "/github/workspace/coredumps/core.%e.%p" | sudo tee /proc/sys/kernel/core_pattern
          ulimit -c unlimited
        shell: bash

      - name: Prepare SDKs
        run: |
          mkdir -p depends/SDKs depends/sdk-sources
          if [ -n "$OSX_SDK" ] && [ ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then
            curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz
          fi
          if [ -n "$OSX_SDK" ] && [ -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then
            tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz
          fi

      #- name: Update Alternatives for MinGW
      #  if: ${{ contains($HOST, '-mingw32') }}
      #  run: sudo update-alternatives --set $HOST -g++ $(which ${HOST} -g++-posix)

      - name: Build Dependencies
        if: ${{ env.CI_DEPENDS_OPTS != '' }}
        run: |
          CONFIG_SHELL= make ${{ env.CI_MAKEJOBS }} -C depends HOST=${HOST} ${{ env.CI_DEPENDS_OPTS }}

      - name: Build Tapyrus Core
        run: |
          # Set environment variables
          export CC=${CC}
          export CXX=${CXX}
          export STEP_OUTDIR="${{ env.CI_BASE_OUTDIR }}/${{ github.sha }}/${HOST}"
          export CONFIG_ALL="--disable-dependency-tracking --with-gui=${{ matrix.gui}} --prefix=${{ github.workspace }}/depends/${HOST} --bindir=${STEP_OUTDIR}/bin --libdir=${STEP_OUTDIR}/lib"

          ccache --max-size=${{ env.CI_CCACHE_SIZE }}
          echo "===== autogen begin ====="
          test -n "$CONFIG_SHELL" && bash -c "$CONFIG_SHELL -c './autogen.sh'" || ./autogen.sh
          mkdir -p build && cd build
          echo "===== configure begin with options: $CONFIG_ALL $CONFIG_OS_OPT ====="
          ../configure --cache-file=config.cache $CONFIG_ALL $CONFIG_OS_OPT $DEBUG_FLAGS || (cat config.log && false)
          echo "===== configure completed; make begin with options ${{ env.CI_MAKEJOBS }} ${{ env.CI_GOAL }} ====="
          make ${{ env.CI_MAKEJOBS }} ${{ env.CI_GOAL }}
          echo "===== make completed ====="
          cp ${STEP_OUTDIR}/test/config.ini test/config.ini

  #test:
  #  name: Test on Multiple Runners
  #  runs-on: ${{ matrix.runner }}
  #  strategy:
  #    matrix:
  #      runner: [ubuntu-22.04, ubuntu24.04]

  #  steps:
  #    - uses: actions/checkout@v4


      - name: Run Unit and Util Tests
        if: ${{ env.CI_RUN_TESTS == 'true' }}
        run: |
          LD_LIBRARY_PATH=${{ github.workspace }}/depends/${HOST}/lib  make ${{ env.CI_MAKEJOBS }} check VERBOSE=1

      - name: Run Functional Tests
        if: ${{ env.CI_RUN_TESTS == 'true' }}
        run: |
          LD_LIBRARY_PATH=${{ github.workspace }}/depends/${HOST}/lib test/functional/test_runner.py \
            --combinedlogslen=4000 \
            --coverage \
            --failfast \
            --quiet \
            --extended ${debugscripts}

      - name: Run Benchmarks
        if: ${{ env.CI_RUN_BENCH == 'true' }}
        run: |
          LD_LIBRARY_PATH=${{ github.workspace }}/depends/${HOST}/lib ${STEP_OUTDIR} /bin/bench_tapyrus -scaling=0.001

      - name: Collect Core Dumps
        uses: actions/upload-artifact@v3
        with:
          name: coredumps
          path: ${{ github.workspace }}/coredumps
